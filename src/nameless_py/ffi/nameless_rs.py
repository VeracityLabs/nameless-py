# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import platform

# Used for default argument values
_DEFAULT = object()  # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_nameless_rs_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(
            _UniffiLib.ffi_nameless_rs_rustbuffer_reserve, rbuf, additional
        )

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_nameless_rs_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity, self.len, self.data[0 : self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError(
                    "junk data left in buffer at end of consume_with_stream"
                )
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")


class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(
            self.len, self.data[0 : self.len]
        )


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset : self.offset + size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset : self.offset + size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")


class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t), "@N", v)


# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.


class InternalError(Exception):
    pass


class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """

    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(
            code=_UniffiRustCallStatus.CALL_SUCCESS,
            error_buf=_UniffiRustBuffer.default(),
        )

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"


def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)


def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result


def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError(
                "_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None"
            )
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError(
            "Invalid _UniffiRustCallStatus code: {}".format(call_status.code)
        )


def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))


def _uniffi_trait_interface_call_with_error(
    call_status, make_call, write_return_value, error_type, lower_error
):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))


class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("_UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("_UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)


# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value


class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError(
                "'{}' object cannot be interpreted as an integer".format(
                    type(value).__name__
                )
            )
        if not isinstance(value, int):
            raise TypeError(
                "__index__ returned non-int (type {})".format(type(value).__name__)
            )
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError(
                "{} requires {} <= value < {}".format(
                    cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX
                )
            )


class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError(
                "__float__ returned non-float (type {})".format(type(value).__name__)
            )


# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()


# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)


def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)


def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("nameless_rs")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib


def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 26
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_nameless_rs_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError(
            "UniFFI contract version mismatch: try cleaning and rebuilding your project"
        )


def _uniffi_check_api_checksums(lib):
    if lib.uniffi_nameless_rs_checksum_method_accumulatorpublickey_verify() != 9679:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_accumulatorsignature_export_cbor()
        != 6834
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_accumulatorsignature_export_json()
        != 63814
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_accumulatorsigningkey_sign() != 31430:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_accumulatorstore_get_current_accumulator()
        != 24762
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_accumulatorstore_get_current_epoch()
        != 49507
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_accumulatorstore_get_previous_accumulator()
        != 4156
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_accumulatorstore_get_updated_identifier()
        != 60852
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_accumulatorstore_revoke_from_identifier()
        != 24763
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_accumulatorvalue_export_cbor() != 56341:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_accumulatorvalue_export_json() != 61332:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_credential_get_attribute_list() != 28830:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialattribute_export_cbor()
        != 11980
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialattribute_export_json()
        != 19669
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_credentialattribute_get_type() != 14248:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_credentialattribute_switch() != 10107:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialattributelist_clone_to_credential_request()
        != 20052
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialattributelist_export_cbor()
        != 12616
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialattributelist_export_json()
        != 16872
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_credentialbuilder_export_cbor() != 19016:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_credentialbuilder_export_json() != 62516:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_credentialbuilder_finalize() != 36648:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialbuilder_generate_credential_request()
        != 55672
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialholder_create_signature()
        != 29222
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialholder_create_signature_with_accumulator()
        != 35259
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialholder_create_updated_credential()
        != 47350
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_credentialholder_export_cbor() != 9436:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_credentialholder_export_json() != 42421:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_credentialholder_get_credential() != 9139:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialholder_get_group_parameters()
        != 4342
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialholder_get_identifier()
        != 18499
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialholder_get_last_valid_accumulator()
        != 41599
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialholder_get_public_key()
        != 50760
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialholder_switch_at_index()
        != 35582
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_credentialrequest_export_cbor() != 811:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_credentialrequest_export_json() != 8183:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialrequest_get_attribute_list()
        != 42608
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_credentialrequest_verify() != 13032:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialrequestattribute_export_cbor()
        != 54117
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialrequestattribute_export_json()
        != 25558
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialrequestattributelist_export_cbor()
        != 22650
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_credentialrequestattributelist_export_json()
        != 408
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_credentialsecret_export_cbor() != 48298:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_credentialsecret_export_json() != 60366:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_groupparameters_export_cbor() != 52929:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_groupparameters_export_json() != 41178:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_identifier_export_cbor() != 35037:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_identifier_export_json() != 45617:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_issuingkey_export_cbor() != 16693:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_issuingkey_export_json() != 58693:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_issuingkey_sign() != 12647:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_monolithicissuer_export_cbor() != 6124:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_monolithicissuer_export_json() != 48097:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_accumulator_store()
        != 49107
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_group_parameters()
        != 49878
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_issuing_key() != 369:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_num_attributes()
        != 41385
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_opening_key()
        != 23229
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_public_key() != 4518:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_monolithicissuer_issue() != 17435:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_monolithicissuer_process_credential_request()
        != 56218
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_monolithicissuer_recover_identifier()
        != 40381
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_monolithicissuer_revoke_from_identifier()
        != 51634
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_namelesssignature_export_cbor() != 15021:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_namelesssignature_export_json() != 62256:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_namelesssignature_get_attribute_list()
        != 30949
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_namelesssignature_verify() != 755:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_export_cbor()
        != 28025
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_export_json()
        != 7087
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_get_accumulator()
        != 1408
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_get_attribute_list()
        != 29301
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_get_signature()
        != 45052
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_verify()
        != 33028
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_openingkey_export_cbor() != 61836:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_openingkey_export_json() != 44696:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_openingkey_open() != 25494:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_partialcredential_export_cbor() != 28612:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_partialcredential_export_json() != 16032:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_partialcredential_validate() != 17033:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_publicgroupinformation_export_cbor()
        != 49591
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_publicgroupinformation_export_json()
        != 12916
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_publickey_export_cbor() != 51092:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_publickey_export_json() != 10577:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_signatureattribute_export_cbor() != 57636:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_signatureattribute_export_json() != 57724:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_signatureattributelist_export_cbor()
        != 52741
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_signatureattributelist_export_json()
        != 14163
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_signedaccumulatorblock_export_cbor()
        != 20947
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_signedaccumulatorblock_export_json()
        != 25828
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_signedaccumulatorvalue_get_signature()
        != 1371
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_signedaccumulatorvalue_get_value()
        != 1180
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_verifier_export_cbor() != 60276:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_verifier_export_json() != 8758:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_method_verifier_verify() != 32701:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_method_verifier_verify_with_accumulator()
        != 35509
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_accumulatorsignature_import_cbor()
        != 37818
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_accumulatorsignature_import_json()
        != 43000
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_accumulatorstore_default() != 31990:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_accumulatorstore_new() != 31400:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_accumulatorvalue_default() != 64718:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_accumulatorvalue_import_cbor()
        != 41488
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_accumulatorvalue_import_json()
        != 9137
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_accumulatorvalue_new() != 49592:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattribute_default()
        != 8321
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_be_bytes_mod_order()
        != 3816
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_le_bytes_mod_order()
        != 48868
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_radix_be()
        != 34461
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_radix_le()
        != 101
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_slice_mod_order()
        != 42537
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattribute_import_cbor()
        != 55747
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattribute_import_json()
        != 8172
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_credentialattribute_new() != 4813:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_be_bytes_mod_order()
        != 14290
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_le_bytes_mod_order()
        != 24175
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_radix_be()
        != 31266
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_radix_le()
        != 36008
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_slice_mod_order()
        != 9597
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_import_cbor()
        != 1349
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_import_json()
        != 1680
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_new()
        != 31009
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialbuilder_import_cbor()
        != 62498
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialbuilder_import_json()
        != 26206
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_credentialbuilder_new() != 59030:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialbuilder_new_with_secret()
        != 3389
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialholder_import_cbor()
        != 34470
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialholder_import_json()
        != 41267
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_credentialholder_new() != 40392:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialrequest_import_cbor()
        != 8022
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialrequest_import_json()
        != 15179
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialrequestattribute_import_cbor()
        != 32078
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialrequestattribute_import_json()
        != 20056
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialrequestattributelist_import_cbor()
        != 9861
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialrequestattributelist_import_json()
        != 19950
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_credentialsecret_default() != 30950:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialsecret_import_cbor()
        != 60333
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_credentialsecret_import_json()
        != 12237
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_credentialsecret_new() != 20840:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_groupparameters_from_hash() != 52231:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_groupparameters_import_cbor()
        != 31333
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_groupparameters_import_json()
        != 23124
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_groupparameters_new() != 63643:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_identifier_import_cbor() != 21413:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_identifier_import_json() != 63739:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_issuingkey_import_cbor() != 42907:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_issuingkey_import_json() != 22008:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_issuingkey_new() != 28717:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_monolithicissuer_import_cbor()
        != 21124
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_monolithicissuer_import_json()
        != 46702
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_monolithicissuer_new() != 1650:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_namelesssignature_import_cbor()
        != 20801
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_namelesssignature_import_json()
        != 60330
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_namelesssignature_new() != 29780:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_namelesssignaturewithaccumulator_import_cbor()
        != 58910
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_namelesssignaturewithaccumulator_import_json()
        != 60785
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_namelesssignaturewithaccumulator_new()
        != 51509
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_openingkey_import_cbor() != 32702:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_openingkey_import_json() != 23189:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_openingkey_new() != 64829:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_partialcredential_import_cbor()
        != 57464
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_partialcredential_import_json()
        != 17577
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_publicgroupinformation_from_hash()
        != 46666
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_publicgroupinformation_import_cbor()
        != 16356
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_publicgroupinformation_import_json()
        != 49648
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_publicgroupinformation_new() != 4311:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_publickey_import_cbor() != 11538:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_publickey_import_json() != 16469:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_publickey_new() != 48262:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_signatureattribute_import_cbor()
        != 45504
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_signatureattribute_import_json()
        != 38060
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_signatureattributelist_import_cbor()
        != 22918
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_signatureattributelist_import_json()
        != 24109
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_signedaccumulatorblock_import_cbor()
        != 15000
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if (
        lib.uniffi_nameless_rs_checksum_constructor_signedaccumulatorblock_import_json()
        != 29376
    ):
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_verifier_import_cbor() != 58930:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_verifier_import_json() != 49957:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )
    if lib.uniffi_nameless_rs_checksum_constructor_verifier_new() != 12971:
        raise InternalError(
            "UniFFI API checksum mismatch: try cleaning and rebuilding your project"
        )


# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
)
_UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
)


class _UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_FREE),
    ]


class _UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]


_UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    _UniffiForeignFutureStructU8,
)


class _UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]


_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    _UniffiForeignFutureStructI8,
)


class _UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]


_UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    _UniffiForeignFutureStructU16,
)


class _UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]


_UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    _UniffiForeignFutureStructI16,
)


class _UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]


_UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    _UniffiForeignFutureStructU32,
)


class _UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]


_UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    _UniffiForeignFutureStructI32,
)


class _UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]


_UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    _UniffiForeignFutureStructU64,
)


class _UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]


_UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    _UniffiForeignFutureStructI64,
)


class _UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]


_UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    _UniffiForeignFutureStructF32,
)


class _UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]


_UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    _UniffiForeignFutureStructF64,
)


class _UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]


_UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    _UniffiForeignFutureStructPointer,
)


class _UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]


_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    _UniffiForeignFutureStructRustBuffer,
)


class _UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]


_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    _UniffiForeignFutureStructVoid,
)
_UNIFFI_CALLBACK_INTERFACE_ACCUMULATOR_PUBLIC_KEY_METHOD0 = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    ctypes.c_void_p,
    ctypes.POINTER(ctypes.c_int8),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ACCUMULATOR_SIGNING_KEY_METHOD0 = ctypes.CFUNCTYPE(
    None,
    ctypes.c_uint64,
    ctypes.c_void_p,
    ctypes.POINTER(ctypes.c_void_p),
    ctypes.POINTER(_UniffiRustCallStatus),
)


class _UniffiVTableCallbackInterfaceAccumulatorPublicKey(ctypes.Structure):
    _fields_ = [
        ("verify", _UNIFFI_CALLBACK_INTERFACE_ACCUMULATOR_PUBLIC_KEY_METHOD0),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]


class _UniffiVTableCallbackInterfaceAccumulatorSigningKey(ctypes.Structure):
    _fields_ = [
        ("sign", _UNIFFI_CALLBACK_INTERFACE_ACCUMULATOR_SIGNING_KEY_METHOD0),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]


_UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorpublickey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorpublickey.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_accumulatorpublickey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_accumulatorpublickey.restype = None
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorpublickey_verify.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorpublickey_verify.restype = (
    ctypes.c_int8
)
_UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorsignature.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorsignature.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_accumulatorsignature.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_accumulatorsignature.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorsignature_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorsignature_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorsignature_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorsignature_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorsignature_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorsignature_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorsignature_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorsignature_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorsigningkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorsigningkey.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_accumulatorsigningkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_accumulatorsigningkey.restype = None
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorsigningkey_sign.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorsigningkey_sign.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorstore.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorstore.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_accumulatorstore.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_accumulatorstore.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorstore_default.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorstore_default.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorstore_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorstore_new.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_get_current_accumulator.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_get_current_accumulator.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_get_current_epoch.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_get_current_epoch.restype = (
    ctypes.c_uint64
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_get_previous_accumulator.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_get_previous_accumulator.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_get_updated_identifier.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_get_updated_identifier.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_revoke_from_identifier.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_revoke_from_identifier.restype = (
    None
)
_UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorvalue.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorvalue.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_accumulatorvalue.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_accumulatorvalue.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorvalue_default.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorvalue_default.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorvalue_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorvalue_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorvalue_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorvalue_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorvalue_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorvalue_new.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorvalue_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorvalue_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorvalue_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_accumulatorvalue_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credential.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credential.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_credential.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_credential.restype = None
_UniffiLib.uniffi_nameless_rs_fn_method_credential_get_attribute_list.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credential_get_attribute_list.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialattribute.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialattribute.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_credentialattribute.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_credentialattribute.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_default.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_default.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_be_bytes_mod_order.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_be_bytes_mod_order.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_le_bytes_mod_order.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_le_bytes_mod_order.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_radix_be.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_radix_be.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_radix_le.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_radix_le.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_slice_mod_order.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_slice_mod_order.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_new.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialattribute_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialattribute_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialattribute_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialattribute_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialattribute_get_type.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialattribute_get_type.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialattribute_switch.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialattribute_switch.restype = None
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialattributelist.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialattributelist.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_credentialattributelist.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_credentialattributelist.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_be_bytes_mod_order.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_be_bytes_mod_order.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_le_bytes_mod_order.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_le_bytes_mod_order.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_radix_be.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_radix_be.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_radix_le.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_radix_le.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_slice_mod_order.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_slice_mod_order.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_new.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialattributelist_clone_to_credential_request.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialattributelist_clone_to_credential_request.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialattributelist_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialattributelist_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialattributelist_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialattributelist_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialbuilder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialbuilder.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_credentialbuilder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_credentialbuilder.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialbuilder_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialbuilder_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialbuilder_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialbuilder_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialbuilder_new.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialbuilder_new.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialbuilder_new_with_secret.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialbuilder_new_with_secret.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialbuilder_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialbuilder_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialbuilder_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialbuilder_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialbuilder_finalize.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialbuilder_finalize.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialbuilder_generate_credential_request.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialbuilder_generate_credential_request.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialholder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialholder.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_credentialholder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_credentialholder.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialholder_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialholder_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialholder_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialholder_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialholder_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialholder_new.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_create_signature.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_create_signature.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_create_signature_with_accumulator.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_create_signature_with_accumulator.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_create_updated_credential.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_create_updated_credential.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_credential.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_credential.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_group_parameters.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_group_parameters.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_identifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_identifier.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_last_valid_accumulator.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_last_valid_accumulator.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_public_key.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_switch_at_index.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_switch_at_index.restype = None
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialrequest.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialrequest.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_credentialrequest.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_credentialrequest.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequest_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequest_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequest_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequest_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequest_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequest_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequest_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequest_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequest_get_attribute_list.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequest_get_attribute_list.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequest_verify.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequest_verify.restype = ctypes.c_int8
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialrequestattribute.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialrequestattribute.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_free_credentialrequestattribute.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_credentialrequestattribute.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequestattribute_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequestattribute_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequestattribute_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequestattribute_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequestattribute_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequestattribute_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequestattribute_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequestattribute_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialrequestattributelist.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialrequestattributelist.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_free_credentialrequestattributelist.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_credentialrequestattributelist.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequestattributelist_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequestattributelist_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequestattributelist_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequestattributelist_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequestattributelist_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequestattributelist_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequestattributelist_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialrequestattributelist_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialsecret.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_credentialsecret.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_credentialsecret.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_credentialsecret.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialsecret_default.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialsecret_default.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialsecret_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialsecret_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialsecret_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialsecret_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialsecret_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_credentialsecret_new.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialsecret_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialsecret_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialsecret_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_credentialsecret_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_clone_groupparameters.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_groupparameters.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_groupparameters.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_groupparameters.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_groupparameters_from_hash.argtypes = (
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_groupparameters_from_hash.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_groupparameters_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_groupparameters_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_groupparameters_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_groupparameters_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_groupparameters_new.argtypes = (
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_groupparameters_new.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_groupparameters_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_groupparameters_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_groupparameters_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_groupparameters_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_clone_identifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_identifier.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_identifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_identifier.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_identifier_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_identifier_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_identifier_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_identifier_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_identifier_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_identifier_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_identifier_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_identifier_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_clone_identifierbuilder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_identifierbuilder.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_identifierbuilder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_identifierbuilder.restype = None
_UniffiLib.uniffi_nameless_rs_fn_clone_issuingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_issuingkey.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_issuingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_issuingkey.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_issuingkey_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_issuingkey_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_issuingkey_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_issuingkey_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_issuingkey_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_issuingkey_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_method_issuingkey_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_issuingkey_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_issuingkey_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_issuingkey_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_issuingkey_sign.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_issuingkey_sign.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_clone_monolithicissuer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_monolithicissuer.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_monolithicissuer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_monolithicissuer.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_monolithicissuer_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_monolithicissuer_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_monolithicissuer_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_monolithicissuer_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_monolithicissuer_new.argtypes = (
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_monolithicissuer_new.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_accumulator_store.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_accumulator_store.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_group_parameters.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_group_parameters.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_issuing_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_issuing_key.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_num_attributes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_num_attributes.restype = (
    ctypes.c_uint32
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_opening_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_opening_key.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_public_key.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_issue.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_issue.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_process_credential_request.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_process_credential_request.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_recover_identifier.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_recover_identifier.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_revoke_from_identifier.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_revoke_from_identifier.restype = (
    None
)
_UniffiLib.uniffi_nameless_rs_fn_clone_namelesssignature.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_namelesssignature.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_namelesssignature.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_namelesssignature.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignature_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignature_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignature_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignature_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignature_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignature_new.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignature_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignature_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignature_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignature_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignature_get_attribute_list.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignature_get_attribute_list.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignature_verify.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignature_verify.restype = ctypes.c_int8
_UniffiLib.uniffi_nameless_rs_fn_clone_namelesssignaturewithaccumulator.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_namelesssignaturewithaccumulator.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_free_namelesssignaturewithaccumulator.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_namelesssignaturewithaccumulator.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignaturewithaccumulator_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignaturewithaccumulator_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignaturewithaccumulator_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignaturewithaccumulator_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignaturewithaccumulator_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignaturewithaccumulator_new.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_get_accumulator.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_get_accumulator.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_get_attribute_list.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_get_attribute_list.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_get_signature.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_get_signature.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_verify.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_verify.restype = (
    ctypes.c_int8
)
_UniffiLib.uniffi_nameless_rs_fn_clone_opener.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_opener.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_opener.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_opener.restype = None
_UniffiLib.uniffi_nameless_rs_fn_clone_openingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_openingkey.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_openingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_openingkey.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_openingkey_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_openingkey_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_openingkey_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_openingkey_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_openingkey_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_openingkey_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_method_openingkey_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_openingkey_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_openingkey_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_openingkey_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_openingkey_open.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_openingkey_open.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_clone_partialcredential.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_partialcredential.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_partialcredential.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_partialcredential.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_partialcredential_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_partialcredential_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_partialcredential_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_partialcredential_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_partialcredential_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_partialcredential_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_partialcredential_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_partialcredential_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_partialcredential_validate.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_partialcredential_validate.restype = (
    ctypes.c_int8
)
_UniffiLib.uniffi_nameless_rs_fn_clone_publicgroupinformation.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_publicgroupinformation.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_publicgroupinformation.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_publicgroupinformation.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_publicgroupinformation_from_hash.argtypes = (
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_publicgroupinformation_from_hash.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_publicgroupinformation_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_publicgroupinformation_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_publicgroupinformation_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_publicgroupinformation_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_publicgroupinformation_new.argtypes = (
    ctypes.c_uint32,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_publicgroupinformation_new.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_publicgroupinformation_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_publicgroupinformation_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_publicgroupinformation_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_publicgroupinformation_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_clone_publickey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_publickey.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_publickey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_publickey.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_publickey_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_publickey_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_publickey_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_publickey_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_publickey_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_publickey_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_method_publickey_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_publickey_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_publickey_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_publickey_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_clone_signatureattribute.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_signatureattribute.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_signatureattribute.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_signatureattribute.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_signatureattribute_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_signatureattribute_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_signatureattribute_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_signatureattribute_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_signatureattribute_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_signatureattribute_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_signatureattribute_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_signatureattribute_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_clone_signatureattributelist.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_signatureattributelist.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_signatureattributelist.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_signatureattributelist.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_signatureattributelist_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_signatureattributelist_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_signatureattributelist_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_signatureattributelist_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_signatureattributelist_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_signatureattributelist_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_signatureattributelist_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_signatureattributelist_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_clone_signedaccumulatorblock.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_signedaccumulatorblock.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_signedaccumulatorblock.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_signedaccumulatorblock.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_signedaccumulatorblock_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_signedaccumulatorblock_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_signedaccumulatorblock_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_signedaccumulatorblock_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_signedaccumulatorblock_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_signedaccumulatorblock_export_cbor.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_method_signedaccumulatorblock_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_signedaccumulatorblock_export_json.restype = (
    _UniffiRustBuffer
)
_UniffiLib.uniffi_nameless_rs_fn_clone_signedaccumulatorvalue.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_signedaccumulatorvalue.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_signedaccumulatorvalue.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_signedaccumulatorvalue.restype = None
_UniffiLib.uniffi_nameless_rs_fn_method_signedaccumulatorvalue_get_signature.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_signedaccumulatorvalue_get_signature.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_method_signedaccumulatorvalue_get_value.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_signedaccumulatorvalue_get_value.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_clone_verifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_clone_verifier.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_free_verifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_free_verifier.restype = None
_UniffiLib.uniffi_nameless_rs_fn_constructor_verifier_import_cbor.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_verifier_import_cbor.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_verifier_import_json.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_verifier_import_json.restype = (
    ctypes.c_void_p
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_verifier_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_constructor_verifier_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nameless_rs_fn_method_verifier_export_cbor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_verifier_export_cbor.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nameless_rs_fn_method_verifier_export_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_verifier_export_json.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nameless_rs_fn_method_verifier_verify.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_verifier_verify.restype = ctypes.c_int8
_UniffiLib.uniffi_nameless_rs_fn_method_verifier_verify_with_accumulator.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nameless_rs_fn_method_verifier_verify_with_accumulator.restype = (
    ctypes.c_int8
)
_UniffiLib.ffi_nameless_rs_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_nameless_rs_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_nameless_rs_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rustbuffer_free.restype = None
_UniffiLib.ffi_nameless_rs_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_nameless_rs_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nameless_rs_rust_future_poll_u8.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_cancel_u8.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_free_u8.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_free_u8.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_nameless_rs_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nameless_rs_rust_future_poll_i8.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_cancel_i8.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_free_i8.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_free_i8.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_nameless_rs_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nameless_rs_rust_future_poll_u16.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_cancel_u16.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_free_u16.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_free_u16.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_nameless_rs_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nameless_rs_rust_future_poll_i16.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_cancel_i16.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_free_i16.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_free_i16.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_nameless_rs_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nameless_rs_rust_future_poll_u32.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_cancel_u32.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_free_u32.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_free_u32.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_nameless_rs_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nameless_rs_rust_future_poll_i32.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_cancel_i32.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_free_i32.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_free_i32.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_nameless_rs_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nameless_rs_rust_future_poll_u64.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_cancel_u64.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_free_u64.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_free_u64.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_nameless_rs_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nameless_rs_rust_future_poll_i64.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_cancel_i64.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_free_i64.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_free_i64.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_nameless_rs_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nameless_rs_rust_future_poll_f32.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_cancel_f32.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_free_f32.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_free_f32.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_nameless_rs_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nameless_rs_rust_future_poll_f64.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_cancel_f64.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_free_f64.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_free_f64.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_nameless_rs_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nameless_rs_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_cancel_pointer.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_free_pointer.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_free_pointer.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_nameless_rs_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nameless_rs_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_cancel_rust_buffer.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_free_rust_buffer.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_nameless_rs_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nameless_rs_rust_future_poll_void.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_cancel_void.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_cancel_void.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_free_void.argtypes = (ctypes.c_uint64,)
_UniffiLib.ffi_nameless_rs_rust_future_free_void.restype = None
_UniffiLib.ffi_nameless_rs_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nameless_rs_rust_future_complete_void.restype = None
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorpublickey_verify.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorpublickey_verify.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorsignature_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorsignature_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorsignature_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorsignature_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorsigningkey_sign.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorsigningkey_sign.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorstore_get_current_accumulator.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorstore_get_current_accumulator.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorstore_get_current_epoch.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorstore_get_current_epoch.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorstore_get_previous_accumulator.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorstore_get_previous_accumulator.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorstore_get_updated_identifier.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorstore_get_updated_identifier.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorstore_revoke_from_identifier.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorstore_revoke_from_identifier.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorvalue_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorvalue_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorvalue_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_accumulatorvalue_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credential_get_attribute_list.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credential_get_attribute_list.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialattribute_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialattribute_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialattribute_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialattribute_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialattribute_get_type.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialattribute_get_type.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialattribute_switch.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialattribute_switch.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialattributelist_clone_to_credential_request.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialattributelist_clone_to_credential_request.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialattributelist_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialattributelist_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialattributelist_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialattributelist_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialbuilder_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialbuilder_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialbuilder_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialbuilder_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialbuilder_finalize.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialbuilder_finalize.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialbuilder_generate_credential_request.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialbuilder_generate_credential_request.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_create_signature.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_create_signature.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_create_signature_with_accumulator.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_create_signature_with_accumulator.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_create_updated_credential.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_create_updated_credential.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_get_credential.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_get_credential.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_get_group_parameters.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_get_group_parameters.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_get_identifier.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_get_identifier.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_get_last_valid_accumulator.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_get_last_valid_accumulator.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_get_public_key.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_get_public_key.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_switch_at_index.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialholder_switch_at_index.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequest_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequest_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequest_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequest_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequest_get_attribute_list.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequest_get_attribute_list.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequest_verify.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequest_verify.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequestattribute_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequestattribute_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequestattribute_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequestattribute_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequestattributelist_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequestattributelist_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequestattributelist_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialrequestattributelist_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialsecret_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialsecret_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialsecret_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_credentialsecret_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_groupparameters_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_groupparameters_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_groupparameters_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_groupparameters_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_identifier_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_identifier_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_identifier_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_identifier_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_issuingkey_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_issuingkey_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_issuingkey_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_issuingkey_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_issuingkey_sign.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_issuingkey_sign.restype = ctypes.c_uint16
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_accumulator_store.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_accumulator_store.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_group_parameters.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_group_parameters.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_issuing_key.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_issuing_key.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_num_attributes.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_num_attributes.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_opening_key.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_opening_key.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_public_key.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_get_public_key.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_issue.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_issue.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_process_credential_request.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_process_credential_request.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_recover_identifier.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_recover_identifier.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_revoke_from_identifier.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_monolithicissuer_revoke_from_identifier.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignature_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignature_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignature_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignature_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignature_get_attribute_list.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignature_get_attribute_list.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignature_verify.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignature_verify.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_get_accumulator.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_get_accumulator.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_get_attribute_list.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_get_attribute_list.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_get_signature.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_get_signature.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_verify.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_namelesssignaturewithaccumulator_verify.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_openingkey_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_openingkey_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_openingkey_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_openingkey_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_openingkey_open.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_openingkey_open.restype = ctypes.c_uint16
_UniffiLib.uniffi_nameless_rs_checksum_method_partialcredential_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_partialcredential_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_partialcredential_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_partialcredential_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_partialcredential_validate.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_partialcredential_validate.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_publicgroupinformation_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_publicgroupinformation_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_publicgroupinformation_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_publicgroupinformation_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_publickey_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_publickey_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_publickey_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_publickey_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_signatureattribute_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_signatureattribute_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_signatureattribute_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_signatureattribute_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_signatureattributelist_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_signatureattributelist_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_signatureattributelist_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_signatureattributelist_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_signedaccumulatorblock_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_signedaccumulatorblock_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_signedaccumulatorblock_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_signedaccumulatorblock_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_signedaccumulatorvalue_get_signature.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_signedaccumulatorvalue_get_signature.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_signedaccumulatorvalue_get_value.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_signedaccumulatorvalue_get_value.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_verifier_export_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_verifier_export_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_verifier_export_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_verifier_export_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_method_verifier_verify.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_verifier_verify.restype = ctypes.c_uint16
_UniffiLib.uniffi_nameless_rs_checksum_method_verifier_verify_with_accumulator.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_method_verifier_verify_with_accumulator.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorsignature_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorsignature_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorsignature_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorsignature_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorstore_default.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorstore_default.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorstore_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorstore_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorvalue_default.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorvalue_default.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorvalue_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorvalue_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorvalue_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorvalue_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorvalue_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_accumulatorvalue_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_default.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_default.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_be_bytes_mod_order.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_be_bytes_mod_order.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_le_bytes_mod_order.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_le_bytes_mod_order.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_radix_be.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_radix_be.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_radix_le.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_radix_le.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_slice_mod_order.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_from_slice_mod_order.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattribute_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_be_bytes_mod_order.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_be_bytes_mod_order.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_le_bytes_mod_order.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_le_bytes_mod_order.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_radix_be.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_radix_be.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_radix_le.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_radix_le.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_slice_mod_order.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_from_slice_mod_order.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialattributelist_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialbuilder_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialbuilder_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialbuilder_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialbuilder_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialbuilder_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialbuilder_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialbuilder_new_with_secret.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialbuilder_new_with_secret.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialholder_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialholder_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialholder_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialholder_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialholder_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialholder_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialrequest_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialrequest_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialrequest_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialrequest_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialrequestattribute_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialrequestattribute_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialrequestattribute_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialrequestattribute_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialrequestattributelist_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialrequestattributelist_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialrequestattributelist_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialrequestattributelist_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialsecret_default.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialsecret_default.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialsecret_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialsecret_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialsecret_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialsecret_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialsecret_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_credentialsecret_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_groupparameters_from_hash.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_groupparameters_from_hash.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_groupparameters_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_groupparameters_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_groupparameters_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_groupparameters_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_groupparameters_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_groupparameters_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_identifier_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_identifier_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_identifier_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_identifier_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_issuingkey_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_issuingkey_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_issuingkey_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_issuingkey_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_issuingkey_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_issuingkey_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_monolithicissuer_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_monolithicissuer_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_monolithicissuer_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_monolithicissuer_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_monolithicissuer_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_monolithicissuer_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_namelesssignature_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_namelesssignature_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_namelesssignature_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_namelesssignature_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_namelesssignature_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_namelesssignature_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_namelesssignaturewithaccumulator_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_namelesssignaturewithaccumulator_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_namelesssignaturewithaccumulator_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_namelesssignaturewithaccumulator_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_namelesssignaturewithaccumulator_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_namelesssignaturewithaccumulator_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_openingkey_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_openingkey_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_openingkey_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_openingkey_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_openingkey_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_openingkey_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_partialcredential_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_partialcredential_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_partialcredential_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_partialcredential_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_publicgroupinformation_from_hash.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_publicgroupinformation_from_hash.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_publicgroupinformation_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_publicgroupinformation_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_publicgroupinformation_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_publicgroupinformation_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_publicgroupinformation_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_publicgroupinformation_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_publickey_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_publickey_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_publickey_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_publickey_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_publickey_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_publickey_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_signatureattribute_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_signatureattribute_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_signatureattribute_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_signatureattribute_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_signatureattributelist_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_signatureattributelist_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_signatureattributelist_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_signatureattributelist_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_signedaccumulatorblock_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_signedaccumulatorblock_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_signedaccumulatorblock_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_signedaccumulatorblock_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_verifier_import_cbor.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_verifier_import_cbor.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_verifier_import_json.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_verifier_import_json.restype = (
    ctypes.c_uint16
)
_UniffiLib.uniffi_nameless_rs_checksum_constructor_verifier_new.argtypes = ()
_UniffiLib.uniffi_nameless_rs_checksum_constructor_verifier_new.restype = (
    ctypes.c_uint16
)
_UniffiLib.ffi_nameless_rs_uniffi_contract_version.argtypes = ()
_UniffiLib.ffi_nameless_rs_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
# _uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)


class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)


class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)


class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()


class _UniffiConverterBytes(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative byte string length")
        return buf.read(size)

    @staticmethod
    def check_lower(value):
        try:
            memoryview(value)
        except TypeError:
            raise TypeError(
                "a bytes-like object is required, not {!r}".format(type(value).__name__)
            )

    @staticmethod
    def write(value, buf):
        buf.write_i32(len(value))
        buf.write(value)


class AccumulatorPublicKeyProtocol(typing.Protocol):
    """
    STUB
    A trait for verifying accumulator signatures, so that any signature scheme can be used.
    Pairing cryptography is not necessary here, so we ask only for a foreign implementation that we can use.
    """

    def verify(self, signature: "AccumulatorSignature"):
        raise NotImplementedError


class AccumulatorPublicKey:
    """
    STUB
    A trait for verifying accumulator signatures, so that any signature scheme can be used.
    Pairing cryptography is not necessary here, so we ask only for a foreign implementation that we can use.
    """

    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_accumulatorpublickey, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorpublickey, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    def verify(self, signature: "AccumulatorSignature") -> "bool":
        _UniffiConverterTypeAccumulatorSignature.check_lower(signature)

        return _UniffiConverterBool.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_accumulatorpublickey_verify,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypeAccumulatorSignature.lower(signature),
            )
        )


class _UniffiConverterTypeAccumulatorPublicKey:

    @staticmethod
    def lift(value: int):
        return AccumulatorPublicKey._make_instance_(value)

    @staticmethod
    def check_lower(value: AccumulatorPublicKey):
        if not isinstance(value, AccumulatorPublicKey):
            raise TypeError(
                "Expected AccumulatorPublicKey instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: AccumulatorPublicKeyProtocol):
        if not isinstance(value, AccumulatorPublicKey):
            raise TypeError(
                "Expected AccumulatorPublicKey instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: AccumulatorPublicKeyProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class AccumulatorSignatureProtocol(typing.Protocol):
    """
    An array of bytes representing an arbitrary accumulator signature. Requires an implementation of the
    accumulator signing key and public key to utilize.
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError


class AccumulatorSignature:
    """
    An array of bytes representing an arbitrary accumulator signature. Requires an implementation of the
    accumulator signing key and public key to utilize.
    """

    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_accumulatorsignature, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorsignature, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorsignature_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorsignature_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_accumulatorsignature_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_accumulatorsignature_export_json,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypeAccumulatorSignature:

    @staticmethod
    def lift(value: int):
        return AccumulatorSignature._make_instance_(value)

    @staticmethod
    def check_lower(value: AccumulatorSignature):
        if not isinstance(value, AccumulatorSignature):
            raise TypeError(
                "Expected AccumulatorSignature instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: AccumulatorSignatureProtocol):
        if not isinstance(value, AccumulatorSignature):
            raise TypeError(
                "Expected AccumulatorSignature instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: AccumulatorSignatureProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class AccumulatorSigningKeyProtocol(typing.Protocol):
    """
    STUB
    A trait for signing accumulator values, so that any signature scheme can be used.
    Pairing cryptography is not necessary here, so we ask only for a foreign implementation that we can use.
    """

    def sign(self, accumulator: "AccumulatorValue"):
        raise NotImplementedError


class AccumulatorSigningKey:
    """
    STUB
    A trait for signing accumulator values, so that any signature scheme can be used.
    Pairing cryptography is not necessary here, so we ask only for a foreign implementation that we can use.
    """

    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_accumulatorsigningkey, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorsigningkey, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    def sign(self, accumulator: "AccumulatorValue") -> "AccumulatorSignature":
        _UniffiConverterTypeAccumulatorValue.check_lower(accumulator)

        return _UniffiConverterTypeAccumulatorSignature.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_accumulatorsigningkey_sign,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypeAccumulatorValue.lower(accumulator),
            )
        )


class _UniffiConverterTypeAccumulatorSigningKey:

    @staticmethod
    def lift(value: int):
        return AccumulatorSigningKey._make_instance_(value)

    @staticmethod
    def check_lower(value: AccumulatorSigningKey):
        if not isinstance(value, AccumulatorSigningKey):
            raise TypeError(
                "Expected AccumulatorSigningKey instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: AccumulatorSigningKeyProtocol):
        if not isinstance(value, AccumulatorSigningKey):
            raise TypeError(
                "Expected AccumulatorSigningKey instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: AccumulatorSigningKeyProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class AccumulatorStoreProtocol(typing.Protocol):
    """
    A collection of accumulator values and a signature over them, as well as an epoch. This is the dynamic public information that needs maintaining
    to implement a group signature scheme.
    # Usage
    ```
    use nameless_rs::core::{AccumulatorStore, IssuingKey};
    use nameless_rs::owners::PartialCredential;

    let accumulator_store = AccumulatorStore::new();

    let issuing_key = IssuingKey::new();


    ```
    """

    def get_current_accumulator(
        self,
    ):
        raise NotImplementedError

    def get_current_epoch(
        self,
    ):
        raise NotImplementedError

    def get_previous_accumulator(self, epoch: "int"):
        raise NotImplementedError

    def get_updated_identifier(self, identifier: "Identifier"):
        raise NotImplementedError

    def revoke_from_identifier(self, identifier: "Identifier"):
        raise NotImplementedError


class AccumulatorStore:
    """
    A collection of accumulator values and a signature over them, as well as an epoch. This is the dynamic public information that needs maintaining
    to implement a group signature scheme.
    # Usage
    ```
    use nameless_rs::core::{AccumulatorStore, IssuingKey};
    use nameless_rs::owners::PartialCredential;

    let accumulator_store = AccumulatorStore::new();

    let issuing_key = IssuingKey::new();


    ```
    """

    _pointer: ctypes.c_void_p

    def __init__(
        self,
    ):
        """
        Construct a new accumulator store, initialized to epoch 0.
        """

        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorstore_new,
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_accumulatorstore, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorstore, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def default(
        cls,
    ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorstore_default,
        )
        return cls._make_instance_(pointer)

    def get_current_accumulator(
        self,
    ) -> "AccumulatorValue":
        return _UniffiConverterTypeAccumulatorValue.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_get_current_accumulator,
                self._uniffi_clone_pointer(),
            )
        )

    def get_current_epoch(
        self,
    ) -> "int":
        return _UniffiConverterUInt64.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_get_current_epoch,
                self._uniffi_clone_pointer(),
            )
        )

    def get_previous_accumulator(self, epoch: "int") -> "AccumulatorValue":
        _UniffiConverterUInt64.check_lower(epoch)

        return _UniffiConverterTypeAccumulatorValue.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_get_previous_accumulator,
                self._uniffi_clone_pointer(),
                _UniffiConverterUInt64.lower(epoch),
            )
        )

    def get_updated_identifier(self, identifier: "Identifier") -> "Identifier":
        _UniffiConverterTypeIdentifier.check_lower(identifier)

        return _UniffiConverterTypeIdentifier.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_get_updated_identifier,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypeIdentifier.lower(identifier),
            )
        )

    def revoke_from_identifier(self, identifier: "Identifier") -> None:
        _UniffiConverterTypeIdentifier.check_lower(identifier)

        _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_method_accumulatorstore_revoke_from_identifier,
            self._uniffi_clone_pointer(),
            _UniffiConverterTypeIdentifier.lower(identifier),
        )


class _UniffiConverterTypeAccumulatorStore:

    @staticmethod
    def lift(value: int):
        return AccumulatorStore._make_instance_(value)

    @staticmethod
    def check_lower(value: AccumulatorStore):
        if not isinstance(value, AccumulatorStore):
            raise TypeError(
                "Expected AccumulatorStore instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: AccumulatorStoreProtocol):
        if not isinstance(value, AccumulatorStore):
            raise TypeError(
                "Expected AccumulatorStore instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: AccumulatorStoreProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class AccumulatorValueProtocol(typing.Protocol):
    """
    The single value of an accumulator.
    # Usage
    A new non-zero accumulator value can be created using the `new` constructor.
    ```
    use nameless_rs::core::AccumulatorValue;
    # use nameless_rs::G1;
    # use ark_ff::Zero;

    let accumulator_value = AccumulatorValue::new();

    assert_ne!(accumulator_value, AccumulatorValue { value: G1::zero(), epoch: 0 });
    ```
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError


class AccumulatorValue:
    """
    The single value of an accumulator.
    # Usage
    A new non-zero accumulator value can be created using the `new` constructor.
    ```
    use nameless_rs::core::AccumulatorValue;
    # use nameless_rs::G1;
    # use ark_ff::Zero;

    let accumulator_value = AccumulatorValue::new();

    assert_ne!(accumulator_value, AccumulatorValue { value: G1::zero(), epoch: 0 });
    ```
    """

    _pointer: ctypes.c_void_p

    def __init__(
        self,
    ):
        """
        Randomly generate a new accumulator value.
        """

        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorvalue_new,
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_accumulatorvalue, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_accumulatorvalue, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def default(
        cls,
    ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorvalue_default,
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorvalue_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_accumulatorvalue_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_accumulatorvalue_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_accumulatorvalue_export_json,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypeAccumulatorValue:

    @staticmethod
    def lift(value: int):
        return AccumulatorValue._make_instance_(value)

    @staticmethod
    def check_lower(value: AccumulatorValue):
        if not isinstance(value, AccumulatorValue):
            raise TypeError(
                "Expected AccumulatorValue instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: AccumulatorValueProtocol):
        if not isinstance(value, AccumulatorValue):
            raise TypeError(
                "Expected AccumulatorValue instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: AccumulatorValueProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class CredentialProtocol(typing.Protocol):
    """
    The personal information associated with an Identifier, necessary to produce signatures.
    Uses a total of 2G1 + (2+k)S.
    """

    def get_attribute_list(
        self,
    ):
        raise NotImplementedError


class Credential:
    """
    The personal information associated with an Identifier, necessary to produce signatures.
    Uses a total of 2G1 + (2+k)S.
    """

    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nameless_rs_fn_free_credential, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_credential, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    def get_attribute_list(
        self,
    ) -> "CredentialAttributeList":
        return _UniffiConverterTypeCredentialAttributeList.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_credential_get_attribute_list,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypeCredential:

    @staticmethod
    def lift(value: int):
        return Credential._make_instance_(value)

    @staticmethod
    def check_lower(value: Credential):
        if not isinstance(value, Credential):
            raise TypeError(
                "Expected Credential instance, {} found".format(type(value).__name__)
            )

    @staticmethod
    def lower(value: CredentialProtocol):
        if not isinstance(value, Credential):
            raise TypeError(
                "Expected Credential instance, {} found".format(type(value).__name__)
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CredentialProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class CredentialAttributeProtocol(typing.Protocol):
    """
    Credential Attributes are how we store identifying information without revealing it.
    Any credential holder may selectively disclose any attribute used in any signatures they create.
    We assume that a credential holder will convert attributes into the appropriate type before producing signatures.
    I would like to achieve this functionality with phantom types, but they are not yet supported by uniffi.
    TODO: EXAMPLES AND DEMO CODE.
    The fundamental unit, a Credential Attribute, is how a credential holder stores information to be communicated in their
    group
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError

    def get_type(
        self,
    ):
        raise NotImplementedError

    def switch(
        self,
    ):
        raise NotImplementedError


class CredentialAttribute:
    """
    Credential Attributes are how we store identifying information without revealing it.
    Any credential holder may selectively disclose any attribute used in any signatures they create.
    We assume that a credential holder will convert attributes into the appropriate type before producing signatures.
    I would like to achieve this functionality with phantom types, but they are not yet supported by uniffi.
    TODO: EXAMPLES AND DEMO CODE.
    The fundamental unit, a Credential Attribute, is how a credential holder stores information to be communicated in their
    group
    """

    _pointer: ctypes.c_void_p

    def __init__(
        self,
    ):
        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_new,
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_credentialattribute, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_credentialattribute, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def default(
        cls,
    ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_default,
        )
        return cls._make_instance_(pointer)

    @classmethod
    def from_be_bytes_mod_order(cls, bytes: "bytes"):
        _UniffiConverterBytes.check_lower(bytes)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_be_bytes_mod_order,
            _UniffiConverterBytes.lower(bytes),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def from_le_bytes_mod_order(cls, bytes: "bytes"):
        _UniffiConverterBytes.check_lower(bytes)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_le_bytes_mod_order,
            _UniffiConverterBytes.lower(bytes),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def from_radix_be(cls, digits: "bytes", radix: "int"):
        _UniffiConverterBytes.check_lower(digits)

        _UniffiConverterUInt32.check_lower(radix)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_radix_be,
            _UniffiConverterBytes.lower(digits),
            _UniffiConverterUInt32.lower(radix),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def from_radix_le(cls, digits: "bytes", radix: "int"):
        _UniffiConverterBytes.check_lower(digits)

        _UniffiConverterUInt32.check_lower(radix)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_radix_le,
            _UniffiConverterBytes.lower(digits),
            _UniffiConverterUInt32.lower(radix),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def from_slice_mod_order(cls, digits: "typing.List[int]"):
        _UniffiConverterSequenceUInt32.check_lower(digits)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_from_slice_mod_order,
            _UniffiConverterSequenceUInt32.lower(digits),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattribute_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialattribute_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialattribute_export_json,
                self._uniffi_clone_pointer(),
            )
        )

    def get_type(
        self,
    ) -> "AttributeType":
        return _UniffiConverterTypeAttributeType.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialattribute_get_type,
                self._uniffi_clone_pointer(),
            )
        )

    def switch(
        self,
    ) -> None:
        _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_method_credentialattribute_switch,
            self._uniffi_clone_pointer(),
        )


class _UniffiConverterTypeCredentialAttribute:

    @staticmethod
    def lift(value: int):
        return CredentialAttribute._make_instance_(value)

    @staticmethod
    def check_lower(value: CredentialAttribute):
        if not isinstance(value, CredentialAttribute):
            raise TypeError(
                "Expected CredentialAttribute instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: CredentialAttributeProtocol):
        if not isinstance(value, CredentialAttribute):
            raise TypeError(
                "Expected CredentialAttribute instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CredentialAttributeProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class CredentialAttributeListProtocol(typing.Protocol):
    """
    A list of CredentialAttributes, intended to remain with the holder.
    """

    def clone_to_credential_request(
        self, group_parameters: "GroupParameters", secret_key: "CredentialSecret"
    ):
        """
        Clone the CredentialAttributeList then convert the clone into a request using the provided group parameters.
        """

        raise NotImplementedError

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError


class CredentialAttributeList:
    """
    A list of CredentialAttributes, intended to remain with the holder.
    """

    _pointer: ctypes.c_void_p

    def __init__(self, credential_attributes: "typing.List[CredentialAttribute]"):
        """
        Construct a CredentialAttributeList from a slice of Arcs of CredentialAttributes.
        """

        _UniffiConverterSequenceTypeCredentialAttribute.check_lower(
            credential_attributes
        )

        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_new,
            _UniffiConverterSequenceTypeCredentialAttribute.lower(
                credential_attributes
            ),
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_credentialattributelist, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_credentialattributelist,
            self._pointer,
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_be_bytes_mod_order(cls, bytes: "typing.List[bytes]"):
        _UniffiConverterSequenceBytes.check_lower(bytes)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_be_bytes_mod_order,
            _UniffiConverterSequenceBytes.lower(bytes),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def from_le_bytes_mod_order(cls, bytes: "typing.List[bytes]"):
        _UniffiConverterSequenceBytes.check_lower(bytes)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_le_bytes_mod_order,
            _UniffiConverterSequenceBytes.lower(bytes),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def from_radix_be(cls, digits: "typing.List[bytes]", radix: "int"):
        _UniffiConverterSequenceBytes.check_lower(digits)

        _UniffiConverterUInt32.check_lower(radix)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_radix_be,
            _UniffiConverterSequenceBytes.lower(digits),
            _UniffiConverterUInt32.lower(radix),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def from_radix_le(cls, digits: "typing.List[bytes]", radix: "int"):
        _UniffiConverterSequenceBytes.check_lower(digits)

        _UniffiConverterUInt32.check_lower(radix)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_radix_le,
            _UniffiConverterSequenceBytes.lower(digits),
            _UniffiConverterUInt32.lower(radix),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def from_slice_mod_order(cls, digits: "typing.List[typing.List[int]]"):
        _UniffiConverterSequenceSequenceUInt32.check_lower(digits)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_from_slice_mod_order,
            _UniffiConverterSequenceSequenceUInt32.lower(digits),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialattributelist_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def clone_to_credential_request(
        self, group_parameters: "GroupParameters", secret_key: "CredentialSecret"
    ) -> "CredentialRequest":
        """
        Clone the CredentialAttributeList then convert the clone into a request using the provided group parameters.
        """

        _UniffiConverterTypeGroupParameters.check_lower(group_parameters)

        _UniffiConverterTypeCredentialSecret.check_lower(secret_key)

        return _UniffiConverterTypeCredentialRequest.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialattributelist_clone_to_credential_request,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypeGroupParameters.lower(group_parameters),
                _UniffiConverterTypeCredentialSecret.lower(secret_key),
            )
        )

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialattributelist_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialattributelist_export_json,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypeCredentialAttributeList:

    @staticmethod
    def lift(value: int):
        return CredentialAttributeList._make_instance_(value)

    @staticmethod
    def check_lower(value: CredentialAttributeList):
        if not isinstance(value, CredentialAttributeList):
            raise TypeError(
                "Expected CredentialAttributeList instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: CredentialAttributeListProtocol):
        if not isinstance(value, CredentialAttributeList):
            raise TypeError(
                "Expected CredentialAttributeList instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CredentialAttributeListProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class CredentialBuilderProtocol(typing.Protocol):
    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError

    def finalize(self, partial_credential: "PartialCredential"):
        raise NotImplementedError

    def generate_credential_request(self, group_parameters: "GroupParameters"):
        raise NotImplementedError


class CredentialBuilder:
    _pointer: ctypes.c_void_p

    def __init__(self, credential_attributes: "CredentialAttributeList"):
        """
        Makes a holder builder with
        """

        _UniffiConverterTypeCredentialAttributeList.check_lower(credential_attributes)

        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialbuilder_new,
            _UniffiConverterTypeCredentialAttributeList.lower(credential_attributes),
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_credentialbuilder, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_credentialbuilder, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialbuilder_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialbuilder_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def new_with_secret(
        cls,
        credential_attributes: "CredentialAttributeList",
        credential_secret: "CredentialSecret",
    ):
        _UniffiConverterTypeCredentialAttributeList.check_lower(credential_attributes)

        _UniffiConverterTypeCredentialSecret.check_lower(credential_secret)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialbuilder_new_with_secret,
            _UniffiConverterTypeCredentialAttributeList.lower(credential_attributes),
            _UniffiConverterTypeCredentialSecret.lower(credential_secret),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialbuilder_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialbuilder_export_json,
                self._uniffi_clone_pointer(),
            )
        )

    def finalize(self, partial_credential: "PartialCredential") -> "CredentialHolder":
        _UniffiConverterTypePartialCredential.check_lower(partial_credential)

        return _UniffiConverterTypeCredentialHolder.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialbuilder_finalize,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypePartialCredential.lower(partial_credential),
            )
        )

    def generate_credential_request(
        self, group_parameters: "GroupParameters"
    ) -> "CredentialRequest":
        _UniffiConverterTypeGroupParameters.check_lower(group_parameters)

        return _UniffiConverterTypeCredentialRequest.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialbuilder_generate_credential_request,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypeGroupParameters.lower(group_parameters),
            )
        )


class _UniffiConverterTypeCredentialBuilder:

    @staticmethod
    def lift(value: int):
        return CredentialBuilder._make_instance_(value)

    @staticmethod
    def check_lower(value: CredentialBuilder):
        if not isinstance(value, CredentialBuilder):
            raise TypeError(
                "Expected CredentialBuilder instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: CredentialBuilderProtocol):
        if not isinstance(value, CredentialBuilder):
            raise TypeError(
                "Expected CredentialBuilder instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CredentialBuilderProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class CredentialHolderProtocol(typing.Protocol):
    def create_signature(self, bytes_to_hash: "bytes"):
        raise NotImplementedError

    def create_signature_with_accumulator(self, bytes_to_hash: "bytes"):
        raise NotImplementedError

    def create_updated_credential(self, identifier: "Identifier"):
        raise NotImplementedError

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError

    def get_credential(
        self,
    ):
        raise NotImplementedError

    def get_group_parameters(
        self,
    ):
        raise NotImplementedError

    def get_identifier(
        self,
    ):
        raise NotImplementedError

    def get_last_valid_accumulator(
        self,
    ):
        raise NotImplementedError

    def get_public_key(
        self,
    ):
        raise NotImplementedError

    def switch_at_index(self, index: "int"):
        raise NotImplementedError


class CredentialHolder:
    _pointer: ctypes.c_void_p

    def __init__(
        self,
        partial_credential: "PartialCredential",
        credential_attributes: "CredentialAttributeList",
        credential_secret: "CredentialSecret",
    ):
        _UniffiConverterTypePartialCredential.check_lower(partial_credential)

        _UniffiConverterTypeCredentialAttributeList.check_lower(credential_attributes)

        _UniffiConverterTypeCredentialSecret.check_lower(credential_secret)

        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialholder_new,
            _UniffiConverterTypePartialCredential.lower(partial_credential),
            _UniffiConverterTypeCredentialAttributeList.lower(credential_attributes),
            _UniffiConverterTypeCredentialSecret.lower(credential_secret),
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_credentialholder, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_credentialholder, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialholder_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialholder_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def create_signature(self, bytes_to_hash: "bytes") -> "NamelessSignature":
        _UniffiConverterBytes.check_lower(bytes_to_hash)

        return _UniffiConverterTypeNamelessSignature.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_create_signature,
                self._uniffi_clone_pointer(),
                _UniffiConverterBytes.lower(bytes_to_hash),
            )
        )

    def create_signature_with_accumulator(
        self, bytes_to_hash: "bytes"
    ) -> "NamelessSignatureWithAccumulator":
        _UniffiConverterBytes.check_lower(bytes_to_hash)

        return _UniffiConverterTypeNamelessSignatureWithAccumulator.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_create_signature_with_accumulator,
                self._uniffi_clone_pointer(),
                _UniffiConverterBytes.lower(bytes_to_hash),
            )
        )

    def create_updated_credential(self, identifier: "Identifier") -> "CredentialHolder":
        _UniffiConverterTypeIdentifier.check_lower(identifier)

        return _UniffiConverterTypeCredentialHolder.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_create_updated_credential,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypeIdentifier.lower(identifier),
            )
        )

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_export_json,
                self._uniffi_clone_pointer(),
            )
        )

    def get_credential(
        self,
    ) -> "Credential":
        return _UniffiConverterTypeCredential.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_credential,
                self._uniffi_clone_pointer(),
            )
        )

    def get_group_parameters(
        self,
    ) -> "GroupParameters":
        return _UniffiConverterTypeGroupParameters.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_group_parameters,
                self._uniffi_clone_pointer(),
            )
        )

    def get_identifier(
        self,
    ) -> "Identifier":
        return _UniffiConverterTypeIdentifier.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_identifier,
                self._uniffi_clone_pointer(),
            )
        )

    def get_last_valid_accumulator(
        self,
    ) -> "SignedAccumulatorValue":
        return _UniffiConverterTypeSignedAccumulatorValue.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_last_valid_accumulator,
                self._uniffi_clone_pointer(),
            )
        )

    def get_public_key(
        self,
    ) -> "PublicKey":
        return _UniffiConverterTypePublicKey.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_get_public_key,
                self._uniffi_clone_pointer(),
            )
        )

    def switch_at_index(self, index: "int") -> None:
        _UniffiConverterUInt32.check_lower(index)

        _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_method_credentialholder_switch_at_index,
            self._uniffi_clone_pointer(),
            _UniffiConverterUInt32.lower(index),
        )


class _UniffiConverterTypeCredentialHolder:

    @staticmethod
    def lift(value: int):
        return CredentialHolder._make_instance_(value)

    @staticmethod
    def check_lower(value: CredentialHolder):
        if not isinstance(value, CredentialHolder):
            raise TypeError(
                "Expected CredentialHolder instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: CredentialHolderProtocol):
        if not isinstance(value, CredentialHolder):
            raise TypeError(
                "Expected CredentialHolder instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CredentialHolderProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class CredentialRequestProtocol(typing.Protocol):
    """
    A full credential request, the entire information needed to request a credential from the issuer.
    The issuer will verify the request and produce an identifier, which can be combined with a
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError

    def get_attribute_list(
        self,
    ):
        raise NotImplementedError

    def verify(self, group_parameters: "GroupParameters"):
        raise NotImplementedError


class CredentialRequest:
    """
    A full credential request, the entire information needed to request a credential from the issuer.
    The issuer will verify the request and produce an identifier, which can be combined with a
    """

    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_credentialrequest, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_credentialrequest, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequest_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequest_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialrequest_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialrequest_export_json,
                self._uniffi_clone_pointer(),
            )
        )

    def get_attribute_list(
        self,
    ) -> "CredentialRequestAttributeList":
        return _UniffiConverterTypeCredentialRequestAttributeList.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialrequest_get_attribute_list,
                self._uniffi_clone_pointer(),
            )
        )

    def verify(self, group_parameters: "GroupParameters") -> "bool":
        _UniffiConverterTypeGroupParameters.check_lower(group_parameters)

        return _UniffiConverterBool.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialrequest_verify,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypeGroupParameters.lower(group_parameters),
            )
        )


class _UniffiConverterTypeCredentialRequest:

    @staticmethod
    def lift(value: int):
        return CredentialRequest._make_instance_(value)

    @staticmethod
    def check_lower(value: CredentialRequest):
        if not isinstance(value, CredentialRequest):
            raise TypeError(
                "Expected CredentialRequest instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: CredentialRequestProtocol):
        if not isinstance(value, CredentialRequest):
            raise TypeError(
                "Expected CredentialRequest instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CredentialRequestProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class CredentialRequestAttributeProtocol(typing.Protocol):
    """
    CredentialRequestAttributes are included in CredentialRequests to the issuer, and as such their
    public values are readable by the issuer. Private values are mapped to G1 so aren't readable.
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError


class CredentialRequestAttribute:
    """
    CredentialRequestAttributes are included in CredentialRequests to the issuer, and as such their
    public values are readable by the issuer. Private values are mapped to G1 so aren't readable.
    """

    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_credentialrequestattribute,
                pointer,
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_credentialrequestattribute,
            self._pointer,
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequestattribute_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequestattribute_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialrequestattribute_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialrequestattribute_export_json,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypeCredentialRequestAttribute:

    @staticmethod
    def lift(value: int):
        return CredentialRequestAttribute._make_instance_(value)

    @staticmethod
    def check_lower(value: CredentialRequestAttribute):
        if not isinstance(value, CredentialRequestAttribute):
            raise TypeError(
                "Expected CredentialRequestAttribute instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: CredentialRequestAttributeProtocol):
        if not isinstance(value, CredentialRequestAttribute):
            raise TypeError(
                "Expected CredentialRequestAttribute instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CredentialRequestAttributeProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class CredentialRequestAttributeListProtocol(typing.Protocol):
    """
    A list of CredentialRequestAttributes.
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError


class CredentialRequestAttributeList:
    """
    A list of CredentialRequestAttributes.
    """

    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_credentialrequestattributelist,
                pointer,
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_credentialrequestattributelist,
            self._pointer,
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequestattributelist_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialrequestattributelist_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialrequestattributelist_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialrequestattributelist_export_json,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypeCredentialRequestAttributeList:

    @staticmethod
    def lift(value: int):
        return CredentialRequestAttributeList._make_instance_(value)

    @staticmethod
    def check_lower(value: CredentialRequestAttributeList):
        if not isinstance(value, CredentialRequestAttributeList):
            raise TypeError(
                "Expected CredentialRequestAttributeList instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: CredentialRequestAttributeListProtocol):
        if not isinstance(value, CredentialRequestAttributeList):
            raise TypeError(
                "Expected CredentialRequestAttributeList instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(
        cls, value: CredentialRequestAttributeListProtocol, buf: _UniffiRustBuffer
    ):
        buf.write_u64(cls.lower(value))


class CredentialSecretProtocol(typing.Protocol):
    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError


class CredentialSecret:
    _pointer: ctypes.c_void_p

    def __init__(
        self,
    ):
        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialsecret_new,
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_credentialsecret, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_credentialsecret, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def default(
        cls,
    ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialsecret_default,
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialsecret_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_credentialsecret_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialsecret_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_credentialsecret_export_json,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypeCredentialSecret:

    @staticmethod
    def lift(value: int):
        return CredentialSecret._make_instance_(value)

    @staticmethod
    def check_lower(value: CredentialSecret):
        if not isinstance(value, CredentialSecret):
            raise TypeError(
                "Expected CredentialSecret instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: CredentialSecretProtocol):
        if not isinstance(value, CredentialSecret):
            raise TypeError(
                "Expected CredentialSecret instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CredentialSecretProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class GroupParametersProtocol(typing.Protocol):
    """
    Public group information not dependent on secret information.
    This allows some configurations to generate group parameters from a hash on-the-fly as an optimization for groups with a large number of credential attribute basepoints.
    Has (2+k)G1+G2 curve points, where k is the number of credential attributes.
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError


class GroupParameters:
    """
    Public group information not dependent on secret information.
    This allows some configurations to generate group parameters from a hash on-the-fly as an optimization for groups with a large number of credential attribute basepoints.
    Has (2+k)G1+G2 curve points, where k is the number of credential attributes.
    """

    _pointer: ctypes.c_void_p

    def __init__(self, max_credential_attributes: "int"):
        _UniffiConverterUInt32.check_lower(max_credential_attributes)

        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_groupparameters_new,
            _UniffiConverterUInt32.lower(max_credential_attributes),
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_groupparameters, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_groupparameters, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_hash(cls, max_credential_attributes: "int"):
        _UniffiConverterUInt32.check_lower(max_credential_attributes)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_groupparameters_from_hash,
            _UniffiConverterUInt32.lower(max_credential_attributes),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_groupparameters_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_groupparameters_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_groupparameters_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_groupparameters_export_json,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypeGroupParameters:

    @staticmethod
    def lift(value: int):
        return GroupParameters._make_instance_(value)

    @staticmethod
    def check_lower(value: GroupParameters):
        if not isinstance(value, GroupParameters):
            raise TypeError(
                "Expected GroupParameters instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: GroupParametersProtocol):
        if not isinstance(value, GroupParameters):
            raise TypeError(
                "Expected GroupParameters instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: GroupParametersProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class IdentifierProtocol(typing.Protocol):
    """
    The user's identifier, signed by the Issuing Key.
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError


class Identifier:
    """
    The user's identifier, signed by the Issuing Key.
    """

    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nameless_rs_fn_free_identifier, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_identifier, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_identifier_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_identifier_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_identifier_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_identifier_export_json,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypeIdentifier:

    @staticmethod
    def lift(value: int):
        return Identifier._make_instance_(value)

    @staticmethod
    def check_lower(value: Identifier):
        if not isinstance(value, Identifier):
            raise TypeError(
                "Expected Identifier instance, {} found".format(type(value).__name__)
            )

    @staticmethod
    def lower(value: IdentifierProtocol):
        if not isinstance(value, Identifier):
            raise TypeError(
                "Expected Identifier instance, {} found".format(type(value).__name__)
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: IdentifierProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class IdentifierBuilderProtocol(typing.Protocol):
    """
    The information required to produce an Identifier.
    """

    pass


class IdentifierBuilder:
    """
    The information required to produce an Identifier.
    """

    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_identifierbuilder, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_identifierbuilder, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeIdentifierBuilder:

    @staticmethod
    def lift(value: int):
        return IdentifierBuilder._make_instance_(value)

    @staticmethod
    def check_lower(value: IdentifierBuilder):
        if not isinstance(value, IdentifierBuilder):
            raise TypeError(
                "Expected IdentifierBuilder instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: IdentifierBuilderProtocol):
        if not isinstance(value, IdentifierBuilder):
            raise TypeError(
                "Expected IdentifierBuilder instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: IdentifierBuilderProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class IssuingKeyProtocol(typing.Protocol):
    """
    The secret information used to issue an identifier.
    # Errors
    ## ReservedUserId
    This error is returned when the user_id matches the negative of one of the secret keys, preventing signing.
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError

    def sign(self, identifier_builder: "IdentifierBuilder"):
        """
        Consumes an identifier builder to produce a signed identifier. If ReservedUserId is returned, rerandomizing the holder_id is recommended.
        """

        raise NotImplementedError


class IssuingKey:
    """
    The secret information used to issue an identifier.
    # Errors
    ## ReservedUserId
    This error is returned when the user_id matches the negative of one of the secret keys, preventing signing.
    """

    _pointer: ctypes.c_void_p

    def __init__(
        self,
    ):
        """
        Create a new issuing key from rand::thread_rng(), regenerating if any keys are equal or zero.
        """

        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_issuingkey_new,
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nameless_rs_fn_free_issuingkey, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_issuingkey, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_issuingkey_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_issuingkey_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_issuingkey_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_issuingkey_export_json,
                self._uniffi_clone_pointer(),
            )
        )

    def sign(self, identifier_builder: "IdentifierBuilder") -> "Identifier":
        """
        Consumes an identifier builder to produce a signed identifier. If ReservedUserId is returned, rerandomizing the holder_id is recommended.
        """

        _UniffiConverterTypeIdentifierBuilder.check_lower(identifier_builder)

        return _UniffiConverterTypeIdentifier.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_issuingkey_sign,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypeIdentifierBuilder.lower(identifier_builder),
            )
        )


class _UniffiConverterTypeIssuingKey:

    @staticmethod
    def lift(value: int):
        return IssuingKey._make_instance_(value)

    @staticmethod
    def check_lower(value: IssuingKey):
        if not isinstance(value, IssuingKey):
            raise TypeError(
                "Expected IssuingKey instance, {} found".format(type(value).__name__)
            )

    @staticmethod
    def lower(value: IssuingKeyProtocol):
        if not isinstance(value, IssuingKey):
            raise TypeError(
                "Expected IssuingKey instance, {} found".format(type(value).__name__)
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: IssuingKeyProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class MonolithicIssuerProtocol(typing.Protocol):
    """
    A monolithic issuer fulfills all possible roles in a group signature scheme.
    It is the quickest way to issue credentials, but it is also requires the most trust.
    # Usage
    ```
    use nameless_rs::multi_owners::MonolithicIssuer;

    let m = MonolithicIssuer::new(10);

    ```
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError

    def get_accumulator_store(
        self,
    ):
        raise NotImplementedError

    def get_group_parameters(
        self,
    ):
        raise NotImplementedError

    def get_issuing_key(
        self,
    ):
        raise NotImplementedError

    def get_num_attributes(
        self,
    ):
        raise NotImplementedError

    def get_opening_key(
        self,
    ):
        raise NotImplementedError

    def get_public_key(
        self,
    ):
        raise NotImplementedError

    def issue(self, credential_request: "CredentialRequest"):
        """
        Issue a HolderBuilder, the remote information needed to construct a holder. Combined with a holders
        local information, this will construct a credential.
        # Panics
        The accumulator store's auxiliary information is behind a write lock, so this function will block
        the rust thread if you attempt to call it from multiple threads. If one of the writers panic, the
        poisoned lock will panic also.
        # Performance
        uses
        """

        raise NotImplementedError

    def process_credential_request(self, credential_request: "CredentialRequest"):
        """
        Convert a holder request into a credential builder.
        """

        raise NotImplementedError

    def recover_identifier(self, signature: "NamelessSignature"):
        """
        Blocks the rust thread until the acc store becomes available.
        """

        raise NotImplementedError

    def revoke_from_identifier(self, identifier: "Identifier"):
        raise NotImplementedError


class MonolithicIssuer:
    """
    A monolithic issuer fulfills all possible roles in a group signature scheme.
    It is the quickest way to issue credentials, but it is also requires the most trust.
    # Usage
    ```
    use nameless_rs::multi_owners::MonolithicIssuer;

    let m = MonolithicIssuer::new(10);

    ```
    """

    _pointer: ctypes.c_void_p

    def __init__(self, max_credential_attributes: "int"):
        """
        Construct a new monolithic issuer from randomness.
        TODO: From a seeded hash.
        """

        _UniffiConverterUInt32.check_lower(max_credential_attributes)

        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_monolithicissuer_new,
            _UniffiConverterUInt32.lower(max_credential_attributes),
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_monolithicissuer, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_monolithicissuer, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_monolithicissuer_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_monolithicissuer_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_export_json,
                self._uniffi_clone_pointer(),
            )
        )

    def get_accumulator_store(
        self,
    ) -> "AccumulatorStore":
        return _UniffiConverterTypeAccumulatorStore.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_accumulator_store,
                self._uniffi_clone_pointer(),
            )
        )

    def get_group_parameters(
        self,
    ) -> "GroupParameters":
        return _UniffiConverterTypeGroupParameters.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_group_parameters,
                self._uniffi_clone_pointer(),
            )
        )

    def get_issuing_key(
        self,
    ) -> "IssuingKey":
        return _UniffiConverterTypeIssuingKey.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_issuing_key,
                self._uniffi_clone_pointer(),
            )
        )

    def get_num_attributes(
        self,
    ) -> "int":
        return _UniffiConverterUInt32.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_num_attributes,
                self._uniffi_clone_pointer(),
            )
        )

    def get_opening_key(
        self,
    ) -> "OpeningKey":
        return _UniffiConverterTypeOpeningKey.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_opening_key,
                self._uniffi_clone_pointer(),
            )
        )

    def get_public_key(
        self,
    ) -> "PublicKey":
        return _UniffiConverterTypePublicKey.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_get_public_key,
                self._uniffi_clone_pointer(),
            )
        )

    def issue(self, credential_request: "CredentialRequest") -> "PartialCredential":
        """
        Issue a HolderBuilder, the remote information needed to construct a holder. Combined with a holders
        local information, this will construct a credential.
        # Panics
        The accumulator store's auxiliary information is behind a write lock, so this function will block
        the rust thread if you attempt to call it from multiple threads. If one of the writers panic, the
        poisoned lock will panic also.
        # Performance
        uses
        """

        _UniffiConverterTypeCredentialRequest.check_lower(credential_request)

        return _UniffiConverterTypePartialCredential.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_issue,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypeCredentialRequest.lower(credential_request),
            )
        )

    def process_credential_request(
        self, credential_request: "CredentialRequest"
    ) -> "IdentifierBuilder":
        """
        Convert a holder request into a credential builder.
        """

        _UniffiConverterTypeCredentialRequest.check_lower(credential_request)

        return _UniffiConverterTypeIdentifierBuilder.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_process_credential_request,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypeCredentialRequest.lower(credential_request),
            )
        )

    def recover_identifier(self, signature: "NamelessSignature") -> "Identifier":
        """
        Blocks the rust thread until the acc store becomes available.
        """

        _UniffiConverterTypeNamelessSignature.check_lower(signature)

        return _UniffiConverterTypeIdentifier.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_recover_identifier,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypeNamelessSignature.lower(signature),
            )
        )

    def revoke_from_identifier(self, identifier: "Identifier") -> None:
        _UniffiConverterTypeIdentifier.check_lower(identifier)

        _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_method_monolithicissuer_revoke_from_identifier,
            self._uniffi_clone_pointer(),
            _UniffiConverterTypeIdentifier.lower(identifier),
        )


class _UniffiConverterTypeMonolithicIssuer:

    @staticmethod
    def lift(value: int):
        return MonolithicIssuer._make_instance_(value)

    @staticmethod
    def check_lower(value: MonolithicIssuer):
        if not isinstance(value, MonolithicIssuer):
            raise TypeError(
                "Expected MonolithicIssuer instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: MonolithicIssuerProtocol):
        if not isinstance(value, MonolithicIssuer):
            raise TypeError(
                "Expected MonolithicIssuer instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: MonolithicIssuerProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class NamelessSignatureProtocol(typing.Protocol):
    """
    A group signature, created by a credential holder proving membership of a group against a specific accumulator value.
    As it can be opened, the opening authority may also verify membership against a different accumuator value.
    Contains 4G1 + (7+k)S points and scalars.
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError

    def get_attribute_list(
        self,
    ):
        raise NotImplementedError

    def verify(
        self,
        public_key: "PublicKey",
        group_parameters: "GroupParameters",
        accumulator: "AccumulatorValue",
        bytes_to_hash: "bytes",
    ):
        """
        Verify a Nameless signature's valaidity against a public key, data and accumulator value.
        Uses 14+4+k scalar multiplications (where k is the number of credential attributes) and two multi-pairings (or four pairings).
        """

        raise NotImplementedError


class NamelessSignature:
    """
    A group signature, created by a credential holder proving membership of a group against a specific accumulator value.
    As it can be opened, the opening authority may also verify membership against a different accumuator value.
    Contains 4G1 + (7+k)S points and scalars.
    """

    _pointer: ctypes.c_void_p

    def __init__(
        self,
        credential: "Credential",
        group_parameters: "GroupParameters",
        public_key: "PublicKey",
        bytes_to_hash: "bytes",
    ):
        """
        Construct a new signature from a credential, group parameters and some data to hash over.
        Uses a maximum of 14+2+k scalar multiplications (where k is the number of credential attributes) and two multi-pairings (or four pairings).
        """

        _UniffiConverterTypeCredential.check_lower(credential)

        _UniffiConverterTypeGroupParameters.check_lower(group_parameters)

        _UniffiConverterTypePublicKey.check_lower(public_key)

        _UniffiConverterBytes.check_lower(bytes_to_hash)

        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignature_new,
            _UniffiConverterTypeCredential.lower(credential),
            _UniffiConverterTypeGroupParameters.lower(group_parameters),
            _UniffiConverterTypePublicKey.lower(public_key),
            _UniffiConverterBytes.lower(bytes_to_hash),
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_namelesssignature, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_namelesssignature, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignature_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignature_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_namelesssignature_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_namelesssignature_export_json,
                self._uniffi_clone_pointer(),
            )
        )

    def get_attribute_list(
        self,
    ) -> "SignatureAttributeList":
        return _UniffiConverterTypeSignatureAttributeList.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_namelesssignature_get_attribute_list,
                self._uniffi_clone_pointer(),
            )
        )

    def verify(
        self,
        public_key: "PublicKey",
        group_parameters: "GroupParameters",
        accumulator: "AccumulatorValue",
        bytes_to_hash: "bytes",
    ) -> "bool":
        """
        Verify a Nameless signature's valaidity against a public key, data and accumulator value.
        Uses 14+4+k scalar multiplications (where k is the number of credential attributes) and two multi-pairings (or four pairings).
        """

        _UniffiConverterTypePublicKey.check_lower(public_key)

        _UniffiConverterTypeGroupParameters.check_lower(group_parameters)

        _UniffiConverterTypeAccumulatorValue.check_lower(accumulator)

        _UniffiConverterBytes.check_lower(bytes_to_hash)

        return _UniffiConverterBool.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_namelesssignature_verify,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypePublicKey.lower(public_key),
                _UniffiConverterTypeGroupParameters.lower(group_parameters),
                _UniffiConverterTypeAccumulatorValue.lower(accumulator),
                _UniffiConverterBytes.lower(bytes_to_hash),
            )
        )


class _UniffiConverterTypeNamelessSignature:

    @staticmethod
    def lift(value: int):
        return NamelessSignature._make_instance_(value)

    @staticmethod
    def check_lower(value: NamelessSignature):
        if not isinstance(value, NamelessSignature):
            raise TypeError(
                "Expected NamelessSignature instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: NamelessSignatureProtocol):
        if not isinstance(value, NamelessSignature):
            raise TypeError(
                "Expected NamelessSignature instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NamelessSignatureProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class NamelessSignatureWithAccumulatorProtocol(typing.Protocol):
    """
    A nameless signature with the accumulator and epoch it was created in attached. This allows verification locally without querying the opening authority,
    at the cost of approximate time-of-creation disclosure.
    Contains 5G1 + (7+k)S, the challenge hash and epoch.
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError

    def get_accumulator(
        self,
    ):
        raise NotImplementedError

    def get_attribute_list(
        self,
    ):
        raise NotImplementedError

    def get_signature(
        self,
    ):
        raise NotImplementedError

    def verify(
        self,
        public_key: "PublicKey",
        group_parameters: "GroupParameters",
        bytes_to_hash: "bytes",
    ):
        raise NotImplementedError


class NamelessSignatureWithAccumulator:
    """
    A nameless signature with the accumulator and epoch it was created in attached. This allows verification locally without querying the opening authority,
    at the cost of approximate time-of-creation disclosure.
    Contains 5G1 + (7+k)S, the challenge hash and epoch.
    """

    _pointer: ctypes.c_void_p

    def __init__(
        self, signature: "NamelessSignature", accumulator: "SignedAccumulatorValue"
    ):
        _UniffiConverterTypeNamelessSignature.check_lower(signature)

        _UniffiConverterTypeSignedAccumulatorValue.check_lower(accumulator)

        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignaturewithaccumulator_new,
            _UniffiConverterTypeNamelessSignature.lower(signature),
            _UniffiConverterTypeSignedAccumulatorValue.lower(accumulator),
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_namelesssignaturewithaccumulator,
                pointer,
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_namelesssignaturewithaccumulator,
            self._pointer,
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignaturewithaccumulator_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_namelesssignaturewithaccumulator_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_export_json,
                self._uniffi_clone_pointer(),
            )
        )

    def get_accumulator(
        self,
    ) -> "SignedAccumulatorValue":
        return _UniffiConverterTypeSignedAccumulatorValue.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_get_accumulator,
                self._uniffi_clone_pointer(),
            )
        )

    def get_attribute_list(
        self,
    ) -> "SignatureAttributeList":
        return _UniffiConverterTypeSignatureAttributeList.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_get_attribute_list,
                self._uniffi_clone_pointer(),
            )
        )

    def get_signature(
        self,
    ) -> "NamelessSignature":
        return _UniffiConverterTypeNamelessSignature.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_get_signature,
                self._uniffi_clone_pointer(),
            )
        )

    def verify(
        self,
        public_key: "PublicKey",
        group_parameters: "GroupParameters",
        bytes_to_hash: "bytes",
    ) -> "bool":
        _UniffiConverterTypePublicKey.check_lower(public_key)

        _UniffiConverterTypeGroupParameters.check_lower(group_parameters)

        _UniffiConverterBytes.check_lower(bytes_to_hash)

        return _UniffiConverterBool.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_namelesssignaturewithaccumulator_verify,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypePublicKey.lower(public_key),
                _UniffiConverterTypeGroupParameters.lower(group_parameters),
                _UniffiConverterBytes.lower(bytes_to_hash),
            )
        )


class _UniffiConverterTypeNamelessSignatureWithAccumulator:

    @staticmethod
    def lift(value: int):
        return NamelessSignatureWithAccumulator._make_instance_(value)

    @staticmethod
    def check_lower(value: NamelessSignatureWithAccumulator):
        if not isinstance(value, NamelessSignatureWithAccumulator):
            raise TypeError(
                "Expected NamelessSignatureWithAccumulator instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: NamelessSignatureWithAccumulatorProtocol):
        if not isinstance(value, NamelessSignatureWithAccumulator):
            raise TypeError(
                "Expected NamelessSignatureWithAccumulator instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(
        cls, value: NamelessSignatureWithAccumulatorProtocol, buf: _UniffiRustBuffer
    ):
        buf.write_u64(cls.lower(value))


class OpenerProtocol(typing.Protocol):
    """
    TODO
    """

    pass


class Opener:
    """
    TODO
    """

    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nameless_rs_fn_free_opener, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_opener, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeOpener:

    @staticmethod
    def lift(value: int):
        return Opener._make_instance_(value)

    @staticmethod
    def check_lower(value: Opener):
        if not isinstance(value, Opener):
            raise TypeError(
                "Expected Opener instance, {} found".format(type(value).__name__)
            )

    @staticmethod
    def lower(value: OpenerProtocol):
        if not isinstance(value, Opener):
            raise TypeError(
                "Expected Opener instance, {} found".format(type(value).__name__)
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: OpenerProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class OpeningKeyProtocol(typing.Protocol):
    """
    The secret information used to open a signature, recovering the identifier used to create that signature, but not their secret information.
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError

    def open(self, signature: "NamelessSignature"):
        """
        Open a signature, recovering the holders identifier but not their user_id. The user_id can be looked up in the accumulator.
        """

        raise NotImplementedError


class OpeningKey:
    """
    The secret information used to open a signature, recovering the identifier used to create that signature, but not their secret information.
    """

    _pointer: ctypes.c_void_p

    def __init__(
        self,
    ):
        """
        Create a new opening key from rand::thread_rng()
        """

        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_openingkey_new,
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nameless_rs_fn_free_openingkey, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_openingkey, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_openingkey_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_openingkey_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_openingkey_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_openingkey_export_json,
                self._uniffi_clone_pointer(),
            )
        )

    def open(self, signature: "NamelessSignature") -> "Identifier":
        """
        Open a signature, recovering the holders identifier but not their user_id. The user_id can be looked up in the accumulator.
        """

        _UniffiConverterTypeNamelessSignature.check_lower(signature)

        return _UniffiConverterTypeIdentifier.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_openingkey_open,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypeNamelessSignature.lower(signature),
            )
        )


class _UniffiConverterTypeOpeningKey:

    @staticmethod
    def lift(value: int):
        return OpeningKey._make_instance_(value)

    @staticmethod
    def check_lower(value: OpeningKey):
        if not isinstance(value, OpeningKey):
            raise TypeError(
                "Expected OpeningKey instance, {} found".format(type(value).__name__)
            )

    @staticmethod
    def lower(value: OpeningKeyProtocol):
        if not isinstance(value, OpeningKey):
            raise TypeError(
                "Expected OpeningKey instance, {} found".format(type(value).__name__)
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: OpeningKeyProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class PartialCredentialProtocol(typing.Protocol):
    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError

    def validate(
        self,
    ):
        raise NotImplementedError


class PartialCredential:
    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_partialcredential, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_partialcredential, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_partialcredential_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_partialcredential_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_partialcredential_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_partialcredential_export_json,
                self._uniffi_clone_pointer(),
            )
        )

    def validate(
        self,
    ) -> "bool":
        return _UniffiConverterBool.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_partialcredential_validate,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypePartialCredential:

    @staticmethod
    def lift(value: int):
        return PartialCredential._make_instance_(value)

    @staticmethod
    def check_lower(value: PartialCredential):
        if not isinstance(value, PartialCredential):
            raise TypeError(
                "Expected PartialCredential instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: PartialCredentialProtocol):
        if not isinstance(value, PartialCredential):
            raise TypeError(
                "Expected PartialCredential instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: PartialCredentialProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class PublicGroupInformationProtocol(typing.Protocol):
    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError


class PublicGroupInformation:
    _pointer: ctypes.c_void_p

    def __init__(
        self,
        max_credential_attributes: "int",
        issuing_key: "IssuingKey",
        opening_key: "OpeningKey",
    ):
        _UniffiConverterUInt32.check_lower(max_credential_attributes)

        _UniffiConverterTypeIssuingKey.check_lower(issuing_key)

        _UniffiConverterTypeOpeningKey.check_lower(opening_key)

        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_publicgroupinformation_new,
            _UniffiConverterUInt32.lower(max_credential_attributes),
            _UniffiConverterTypeIssuingKey.lower(issuing_key),
            _UniffiConverterTypeOpeningKey.lower(opening_key),
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_publicgroupinformation, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_publicgroupinformation, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_hash(cls, max_credential_attributes: "int"):
        _UniffiConverterUInt32.check_lower(max_credential_attributes)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_publicgroupinformation_from_hash,
            _UniffiConverterUInt32.lower(max_credential_attributes),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_publicgroupinformation_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_publicgroupinformation_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_publicgroupinformation_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_publicgroupinformation_export_json,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypePublicGroupInformation:

    @staticmethod
    def lift(value: int):
        return PublicGroupInformation._make_instance_(value)

    @staticmethod
    def check_lower(value: PublicGroupInformation):
        if not isinstance(value, PublicGroupInformation):
            raise TypeError(
                "Expected PublicGroupInformation instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: PublicGroupInformationProtocol):
        if not isinstance(value, PublicGroupInformation):
            raise TypeError(
                "Expected PublicGroupInformation instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: PublicGroupInformationProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class PublicKeyProtocol(typing.Protocol):
    """
    A public key for the group signature scheme. Smaller than the full group parameters, constructed from group secret information.
    Contains 2G1 + 2G2 points, and eventually the accumulator public key which has unknown size.
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError


class PublicKey:
    """
    A public key for the group signature scheme. Smaller than the full group parameters, constructed from group secret information.
    Contains 2G1 + 2G2 points, and eventually the accumulator public key which has unknown size.
    """

    _pointer: ctypes.c_void_p

    def __init__(
        self,
        group_parameters: "GroupParameters",
        issuing_key: "IssuingKey",
        opening_key: "OpeningKey",
    ):
        _UniffiConverterTypeGroupParameters.check_lower(group_parameters)

        _UniffiConverterTypeIssuingKey.check_lower(issuing_key)

        _UniffiConverterTypeOpeningKey.check_lower(opening_key)

        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_publickey_new,
            _UniffiConverterTypeGroupParameters.lower(group_parameters),
            _UniffiConverterTypeIssuingKey.lower(issuing_key),
            _UniffiConverterTypeOpeningKey.lower(opening_key),
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nameless_rs_fn_free_publickey, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_publickey, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_publickey_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_publickey_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_publickey_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_publickey_export_json,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypePublicKey:

    @staticmethod
    def lift(value: int):
        return PublicKey._make_instance_(value)

    @staticmethod
    def check_lower(value: PublicKey):
        if not isinstance(value, PublicKey):
            raise TypeError(
                "Expected PublicKey instance, {} found".format(type(value).__name__)
            )

    @staticmethod
    def lower(value: PublicKeyProtocol):
        if not isinstance(value, PublicKey):
            raise TypeError(
                "Expected PublicKey instance, {} found".format(type(value).__name__)
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: PublicKeyProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class SignatureAttributeProtocol(typing.Protocol):
    """
    SignatureAttributes are included in any created signatures, and as such their public values
    are able to be read by any party. Their private values will be re-randomized in every signature.
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError


class SignatureAttribute:
    """
    SignatureAttributes are included in any created signatures, and as such their public values
    are able to be read by any party. Their private values will be re-randomized in every signature.
    """

    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_signatureattribute, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_signatureattribute, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_signatureattribute_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_signatureattribute_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_signatureattribute_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_signatureattribute_export_json,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypeSignatureAttribute:

    @staticmethod
    def lift(value: int):
        return SignatureAttribute._make_instance_(value)

    @staticmethod
    def check_lower(value: SignatureAttribute):
        if not isinstance(value, SignatureAttribute):
            raise TypeError(
                "Expected SignatureAttribute instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: SignatureAttributeProtocol):
        if not isinstance(value, SignatureAttribute):
            raise TypeError(
                "Expected SignatureAttribute instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: SignatureAttributeProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class SignatureAttributeListProtocol(typing.Protocol):
    """
    A signature attribute list, attached to generated signatures.
    """

    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError


class SignatureAttributeList:
    """
    A signature attribute list, attached to generated signatures.
    """

    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_signatureattributelist, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_signatureattributelist, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_signatureattributelist_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_signatureattributelist_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_signatureattributelist_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_signatureattributelist_export_json,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypeSignatureAttributeList:

    @staticmethod
    def lift(value: int):
        return SignatureAttributeList._make_instance_(value)

    @staticmethod
    def check_lower(value: SignatureAttributeList):
        if not isinstance(value, SignatureAttributeList):
            raise TypeError(
                "Expected SignatureAttributeList instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: SignatureAttributeListProtocol):
        if not isinstance(value, SignatureAttributeList):
            raise TypeError(
                "Expected SignatureAttributeList instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: SignatureAttributeListProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class SignedAccumulatorBlockProtocol(typing.Protocol):
    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError


class SignedAccumulatorBlock:
    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_signedaccumulatorblock, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_signedaccumulatorblock, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_signedaccumulatorblock_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_signedaccumulatorblock_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_signedaccumulatorblock_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_signedaccumulatorblock_export_json,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypeSignedAccumulatorBlock:

    @staticmethod
    def lift(value: int):
        return SignedAccumulatorBlock._make_instance_(value)

    @staticmethod
    def check_lower(value: SignedAccumulatorBlock):
        if not isinstance(value, SignedAccumulatorBlock):
            raise TypeError(
                "Expected SignedAccumulatorBlock instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: SignedAccumulatorBlockProtocol):
        if not isinstance(value, SignedAccumulatorBlock):
            raise TypeError(
                "Expected SignedAccumulatorBlock instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: SignedAccumulatorBlockProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class SignedAccumulatorValueProtocol(typing.Protocol):
    def get_signature(
        self,
    ):
        raise NotImplementedError

    def get_value(
        self,
    ):
        raise NotImplementedError


class SignedAccumulatorValue:
    _pointer: ctypes.c_void_p

    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_free_signedaccumulatorvalue, pointer
            )

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_signedaccumulatorvalue, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    def get_signature(
        self,
    ) -> "AccumulatorSignature":
        return _UniffiConverterTypeAccumulatorSignature.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_signedaccumulatorvalue_get_signature,
                self._uniffi_clone_pointer(),
            )
        )

    def get_value(
        self,
    ) -> "AccumulatorValue":
        return _UniffiConverterTypeAccumulatorValue.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_signedaccumulatorvalue_get_value,
                self._uniffi_clone_pointer(),
            )
        )


class _UniffiConverterTypeSignedAccumulatorValue:

    @staticmethod
    def lift(value: int):
        return SignedAccumulatorValue._make_instance_(value)

    @staticmethod
    def check_lower(value: SignedAccumulatorValue):
        if not isinstance(value, SignedAccumulatorValue):
            raise TypeError(
                "Expected SignedAccumulatorValue instance, {} found".format(
                    type(value).__name__
                )
            )

    @staticmethod
    def lower(value: SignedAccumulatorValueProtocol):
        if not isinstance(value, SignedAccumulatorValue):
            raise TypeError(
                "Expected SignedAccumulatorValue instance, {} found".format(
                    type(value).__name__
                )
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: SignedAccumulatorValueProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class VerifierProtocol(typing.Protocol):
    def export_cbor(
        self,
    ):
        raise NotImplementedError

    def export_json(
        self,
    ):
        raise NotImplementedError

    def verify(self, signature: "NamelessSignature", bytes_to_hash: "bytes"):
        raise NotImplementedError

    def verify_with_accumulator(
        self, signature: "NamelessSignatureWithAccumulator", bytes_to_hash: "bytes"
    ):
        raise NotImplementedError


class Verifier:
    _pointer: ctypes.c_void_p

    def __init__(
        self,
        public_key: "PublicKey",
        group_parameters: "GroupParameters",
        accumulator_value: "AccumulatorValue",
    ):
        _UniffiConverterTypePublicKey.check_lower(public_key)

        _UniffiConverterTypeGroupParameters.check_lower(group_parameters)

        _UniffiConverterTypeAccumulatorValue.check_lower(accumulator_value)

        self._pointer = _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_constructor_verifier_new,
            _UniffiConverterTypePublicKey.lower(public_key),
            _UniffiConverterTypeGroupParameters.lower(group_parameters),
            _UniffiConverterTypeAccumulatorValue.lower(accumulator_value),
        )

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_nameless_rs_fn_free_verifier, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(
            _UniffiLib.uniffi_nameless_rs_fn_clone_verifier, self._pointer
        )

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def import_cbor(cls, data: "bytes"):
        _UniffiConverterBytes.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_verifier_import_cbor,
            _UniffiConverterBytes.lower(data),
        )
        return cls._make_instance_(pointer)

    @classmethod
    def import_json(cls, data: "str"):
        _UniffiConverterString.check_lower(data)

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call_with_error(
            _UniffiConverterTypeApiError,
            _UniffiLib.uniffi_nameless_rs_fn_constructor_verifier_import_json,
            _UniffiConverterString.lower(data),
        )
        return cls._make_instance_(pointer)

    def export_cbor(
        self,
    ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_verifier_export_cbor,
                self._uniffi_clone_pointer(),
            )
        )

    def export_json(
        self,
    ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(
                _UniffiConverterTypeApiError,
                _UniffiLib.uniffi_nameless_rs_fn_method_verifier_export_json,
                self._uniffi_clone_pointer(),
            )
        )

    def verify(self, signature: "NamelessSignature", bytes_to_hash: "bytes") -> "bool":
        _UniffiConverterTypeNamelessSignature.check_lower(signature)

        _UniffiConverterBytes.check_lower(bytes_to_hash)

        return _UniffiConverterBool.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_verifier_verify,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypeNamelessSignature.lower(signature),
                _UniffiConverterBytes.lower(bytes_to_hash),
            )
        )

    def verify_with_accumulator(
        self, signature: "NamelessSignatureWithAccumulator", bytes_to_hash: "bytes"
    ) -> "bool":
        _UniffiConverterTypeNamelessSignatureWithAccumulator.check_lower(signature)

        _UniffiConverterBytes.check_lower(bytes_to_hash)

        return _UniffiConverterBool.lift(
            _uniffi_rust_call(
                _UniffiLib.uniffi_nameless_rs_fn_method_verifier_verify_with_accumulator,
                self._uniffi_clone_pointer(),
                _UniffiConverterTypeNamelessSignatureWithAccumulator.lower(signature),
                _UniffiConverterBytes.lower(bytes_to_hash),
            )
        )


class _UniffiConverterTypeVerifier:

    @staticmethod
    def lift(value: int):
        return Verifier._make_instance_(value)

    @staticmethod
    def check_lower(value: Verifier):
        if not isinstance(value, Verifier):
            raise TypeError(
                "Expected Verifier instance, {} found".format(type(value).__name__)
            )

    @staticmethod
    def lower(value: VerifierProtocol):
        if not isinstance(value, Verifier):
            raise TypeError(
                "Expected Verifier instance, {} found".format(type(value).__name__)
            )
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: VerifierProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


# ApiError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class ApiError(Exception):
    """
    Errors returned by this crate.
    """

    pass


_UniffiTempApiError = ApiError


class ApiError:  # type: ignore
    """
    Errors returned by this crate.
    """

    class ReservedUserId(_UniffiTempApiError):
        """
        This error is very unlikely to occur naturally. When it appears, especially if it occurs multiple times,
        it is possible that secret information has been leaked.
        """

        def __init__(self):
            pass

        def __repr__(self):
            return "ApiError.ReservedUserId({})".format(str(self))

    _UniffiTempApiError.ReservedUserId = ReservedUserId  # type: ignore

    class SerializationFailed(_UniffiTempApiError):
        """
        CBOR serialization failed - this is most likely a bug in the ciborium library or an OOME.
        """

        def __init__(self):
            pass

        def __repr__(self):
            return "ApiError.SerializationFailed({})".format(str(self))

    _UniffiTempApiError.SerializationFailed = SerializationFailed  # type: ignore

    class DeserializationFailed(_UniffiTempApiError):
        """
        CBOR deserialization failed - this is most likely a bug in the ciborium library or an OOME.
        """

        def __init__(self):
            pass

        def __repr__(self):
            return "ApiError.DeserializationFailed({})".format(str(self))

    _UniffiTempApiError.DeserializationFailed = DeserializationFailed  # type: ignore

    class InvalidDigitsInRadix(_UniffiTempApiError):
        """
        The digits provided were not valid, typically because one digit exceeds the radix.
        """

        def __init__(self):
            pass

        def __repr__(self):
            return "ApiError.InvalidDigitsInRadix({})".format(str(self))

    _UniffiTempApiError.InvalidDigitsInRadix = InvalidDigitsInRadix  # type: ignore

    class InvalidCredentialRequest(_UniffiTempApiError):
        """
        A credential request failed to verify it's proof.
        """

        def __init__(self):
            pass

        def __repr__(self):
            return "ApiError.InvalidCredentialRequest({})".format(str(self))

    _UniffiTempApiError.InvalidCredentialRequest = InvalidCredentialRequest  # type: ignore

    class InvalidPartialCredential(_UniffiTempApiError):
        """
        A partial credential failed to verify against it's group parameters.
        """

        def __init__(self):
            pass

        def __repr__(self):
            return "ApiError.InvalidPartialCredential({})".format(str(self))

    _UniffiTempApiError.InvalidPartialCredential = InvalidPartialCredential  # type: ignore

    class IdentifierNotInAccumulator(_UniffiTempApiError):
        """
        A lookup failed to find a valid identifier in the accumulator store.
        """

        def __init__(self):
            pass

        def __repr__(self):
            return "ApiError.IdentifierNotInAccumulator({})".format(str(self))

    _UniffiTempApiError.IdentifierNotInAccumulator = IdentifierNotInAccumulator  # type: ignore


ApiError = _UniffiTempApiError  # type: ignore
del _UniffiTempApiError


class _UniffiConverterTypeApiError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ApiError.ReservedUserId()
        if variant == 2:
            return ApiError.SerializationFailed()
        if variant == 3:
            return ApiError.DeserializationFailed()
        if variant == 4:
            return ApiError.InvalidDigitsInRadix()
        if variant == 5:
            return ApiError.InvalidCredentialRequest()
        if variant == 6:
            return ApiError.InvalidPartialCredential()
        if variant == 7:
            return ApiError.IdentifierNotInAccumulator()
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, ApiError.ReservedUserId):
            return
        if isinstance(value, ApiError.SerializationFailed):
            return
        if isinstance(value, ApiError.DeserializationFailed):
            return
        if isinstance(value, ApiError.InvalidDigitsInRadix):
            return
        if isinstance(value, ApiError.InvalidCredentialRequest):
            return
        if isinstance(value, ApiError.InvalidPartialCredential):
            return
        if isinstance(value, ApiError.IdentifierNotInAccumulator):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, ApiError.ReservedUserId):
            buf.write_i32(1)
        if isinstance(value, ApiError.SerializationFailed):
            buf.write_i32(2)
        if isinstance(value, ApiError.DeserializationFailed):
            buf.write_i32(3)
        if isinstance(value, ApiError.InvalidDigitsInRadix):
            buf.write_i32(4)
        if isinstance(value, ApiError.InvalidCredentialRequest):
            buf.write_i32(5)
        if isinstance(value, ApiError.InvalidPartialCredential):
            buf.write_i32(6)
        if isinstance(value, ApiError.IdentifierNotInAccumulator):
            buf.write_i32(7)


class AttributeType(enum.Enum):
    """
    There are three classes of Credential Attribute - The CredentialAttributeList, which is part of the credential,
    the CredentialRequestAttribute which is single-use for requesting credentials and the SignatureAttribute which is transmitted with signatures.
    In signature lists, private attributes are blinded. In request lists, private attributes are mapped to a single curve point.
    """

    PUBLIC = 0
    """
    A public attribute, no conversion will modify these.
    """

    PRIVATE = 1
    """
    A private attribute, when converted to a signature it will be blinded,
    and so will be zero-knowledge unreadable in signatures. When converted to a request,
    it will be mapped onto G1 allowing credentials to be generated without server knowledge.
    """


class _UniffiConverterTypeAttributeType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return AttributeType.PUBLIC
        if variant == 2:
            return AttributeType.PRIVATE
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == AttributeType.PUBLIC:
            return
        if value == AttributeType.PRIVATE:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == AttributeType.PUBLIC:
            buf.write_i32(1)
        if value == AttributeType.PRIVATE:
            buf.write_i32(2)


class _UniffiConverterSequenceUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterUInt32.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterUInt32.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [_UniffiConverterUInt32.read(buf) for i in range(count)]


class _UniffiConverterSequenceBytes(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterBytes.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterBytes.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [_UniffiConverterBytes.read(buf) for i in range(count)]


class _UniffiConverterSequenceTypeCredentialAttribute(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeCredentialAttribute.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeCredentialAttribute.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [_UniffiConverterTypeCredentialAttribute.read(buf) for i in range(count)]


class _UniffiConverterSequenceSequenceUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterSequenceUInt32.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterSequenceUInt32.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [_UniffiConverterSequenceUInt32.read(buf) for i in range(count)]


# Async support

__all__ = [
    "InternalError",
    "ApiError",
    "AttributeType",
    "AccumulatorPublicKey",
    "AccumulatorSignature",
    "AccumulatorSigningKey",
    "AccumulatorStore",
    "AccumulatorValue",
    "Credential",
    "CredentialAttribute",
    "CredentialAttributeList",
    "CredentialBuilder",
    "CredentialHolder",
    "CredentialRequest",
    "CredentialRequestAttribute",
    "CredentialRequestAttributeList",
    "CredentialSecret",
    "GroupParameters",
    "Identifier",
    "IdentifierBuilder",
    "IssuingKey",
    "MonolithicIssuer",
    "NamelessSignature",
    "NamelessSignatureWithAccumulator",
    "Opener",
    "OpeningKey",
    "PartialCredential",
    "PublicGroupInformation",
    "PublicKey",
    "SignatureAttribute",
    "SignatureAttributeList",
    "SignedAccumulatorBlock",
    "SignedAccumulatorValue",
    "Verifier",
]
